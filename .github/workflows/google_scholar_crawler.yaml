name: Update Google Scholar Citations and Purge Cache

on:
  schedule:
    # Runs at 8:00 AM UTC every day
    - cron: '0 8 * * *'
  workflow_dispatch: # Allows manual triggering from the Actions tab
  push:
    branches:
      - main # Or your default branch
    paths:
      - '.github/workflows/google_scholar_crawler.yaml'
      - 'google_scholar_crawler/**'

jobs:
  scrape-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    permissions:
      contents: write

    steps:
    - name: Checkout main branch code
      uses: actions/checkout@v4
      with:
        ref: 'main'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r google_scholar_crawler/requirements.txt

    - name: Run Scraper
      id: scrape
      env:
        GOOGLE_SCHOLAR_ID: ${{ secrets.GOOGLE_SCHOLAR_ID }}
        PYTHONUNBUFFERED: "1"
      run: |
        # The scraper script will create .json files in the root directory
        python google_scholar_crawler/main.py

    # NEW STEP: Purge jsDelivr cache for all updated files
    - name: Purge jsDelivr Cache
      run: |
        echo "Starting jsDelivr cache purge..."
        # Loop through all JSON files generated by the scraper in the root directory
        for file in $(find . -maxdepth 1 -type f -name "*.json"); do
          # Remove the leading './' from the filename
          filename=$(basename "$file")
          # Construct the purge URL
          purge_url="https://purge.jsdelivr.net/gh/${{ github.repository }}@google-scholar-stats/${filename}"
          echo "Purging: $purge_url"
          # Send a GET request to the purge URL.
          # We use '-s -o /dev/null' to make the request silently and discard the output.
          # The '-w "%{http_code}"' part will print the HTTP status code.
          status_code=$(curl -s -o /dev/null -w "%{http_code}" "$purge_url")
          echo "Status code for $filename: $status_code"
          # Optional: Add a small delay between requests
          sleep 1
        done
        echo "Cache purge completed."

    - name: Deploy data to orphan branch
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        git checkout --orphan google-scholar-stats
        git rm -rf . || exit 0
        
        git add -f ./*.json
        git commit -m "Deploy latest citation data at $(date -u)"
        
        echo "Pushing data-only branch to repository..."
        git push origin google-scholar-stats --force